'use strict';var OnLoginRequested=function(){var _ref=_asyncToGenerator(/*#__PURE__*/regeneratorRuntime.mark(function _callee(spark,message){var account,accountGet;return regeneratorRuntime.wrap(function _callee$(_context){while(1){switch(_context.prev=_context.next){case 0:_context.next=2;return db.setAccount(message.data);case 2:account=_context.sent;_context.prev=3;_context.next=6;return db.getAccount(account.username,account.password);case 6:accountGet=_context.sent;message={id:2,message:'LoginAccepted',data:{account:accountGet}};_context.next=13;break;case 10:_context.prev=10;_context.t0=_context['catch'](3);message={id:3,message:'LoginRefused',data:{reason:_context.t0}};case 13:_context.prev=13;server.send(spark,message);return _context.finish(13);case 16:case'end':return _context.stop();}}},_callee,this,[[3,10,13,16]])}));return function OnLoginRequested(_x,_x2){return _ref.apply(this,arguments)}}();//////////////////////////// Client ////////////////////////////
var OnLoginAccepted=function(){var _ref2=_asyncToGenerator(/*#__PURE__*/regeneratorRuntime.mark(function _callee2(client,message){var account,accounts;return regeneratorRuntime.wrap(function _callee2$(_context2){while(1){switch(_context2.prev=_context2.next){case 0:account=message.data.account;console.log(account.username+' have '+account.money+' money.');_context2.next=4;return db.getAllAccounts();case 4:accounts=_context2.sent;console.log('There is %d accounts in the database',accounts.length);case 6:case'end':return _context2.stop();}}},_callee2,this)}));return function OnLoginAccepted(_x3,_x4){return _ref2.apply(this,arguments)}}();var _GameServer=require('./GameServer');var _GameServer2=_interopRequireDefault(_GameServer);var _GameClient=require('./GameClient');var _GameClient2=_interopRequireDefault(_GameClient);var _Database=require('./Database');var _Database2=_interopRequireDefault(_Database);function _interopRequireDefault(obj){return obj&&obj.__esModule?obj:{default:obj}}function _asyncToGenerator(fn){return function(){var gen=fn.apply(this,arguments);return new Promise(function(resolve,reject){function step(key,arg){try{var info=gen[key](arg);var value=info.value}catch(error){reject(error);return}if(info.done){resolve(value)}else{return Promise.resolve(value).then(function(value){step('next',value)},function(err){step('throw',err)})}}return step('next')})}}//////////////////////////// Variables ////////////////////////////
var db=new _Database2.default;var server=new _GameServer2.default;var client=new _GameClient2.default;//////////////////////////// Redis ////////////////////////////
db.redis.on('connect',function(){return console.log('Connected to Redis...')});db.redis.on('error',function(error){console.log(error.message);server.stop()});//////////////////////////// Server ////////////////////////////
server.dispatcher.register('LoginRequested',OnLoginRequested);client.dispatcher.register('LoginAccepted',OnLoginAccepted);client.dispatcher.register('LoginRefused',OnLoginRefused);function OnLoginRefused(client,message){console.log(client.getId()+' : '+message.data.reason)}// for (var i = 0; i < 2; i++) {
//   var client = new GameClient
//   client.dispatcher.register('LoginAccepted', OnLoginAccepted)
//   client.dispatcher.register('LoginRefused', OnLoginRefused)
// }